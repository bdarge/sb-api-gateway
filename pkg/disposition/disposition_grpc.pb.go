// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: pkg/pb/disposition.proto

package disposition

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DispositionServiceClient is the client API for DispositionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DispositionServiceClient interface {
	CreateDisposition(ctx context.Context, in *CreateDispositionRequest, opts ...grpc.CallOption) (*CreateDispositionResponse, error)
	GetDisposition(ctx context.Context, in *GetDispositionRequest, opts ...grpc.CallOption) (*GetDispositionResponse, error)
	GetDispositions(ctx context.Context, in *GetDispositionsRequest, opts ...grpc.CallOption) (*GetDispositionsResponse, error)
}

type dispositionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDispositionServiceClient(cc grpc.ClientConnInterface) DispositionServiceClient {
	return &dispositionServiceClient{cc}
}

func (c *dispositionServiceClient) CreateDisposition(ctx context.Context, in *CreateDispositionRequest, opts ...grpc.CallOption) (*CreateDispositionResponse, error) {
	out := new(CreateDispositionResponse)
	err := c.cc.Invoke(ctx, "/disposition.DispositionService/CreateDisposition", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dispositionServiceClient) GetDisposition(ctx context.Context, in *GetDispositionRequest, opts ...grpc.CallOption) (*GetDispositionResponse, error) {
	out := new(GetDispositionResponse)
	err := c.cc.Invoke(ctx, "/disposition.DispositionService/GetDisposition", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dispositionServiceClient) GetDispositions(ctx context.Context, in *GetDispositionsRequest, opts ...grpc.CallOption) (*GetDispositionsResponse, error) {
	out := new(GetDispositionsResponse)
	err := c.cc.Invoke(ctx, "/disposition.DispositionService/GetDispositions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DispositionServiceServer is the server API for DispositionService service.
// All implementations must embed UnimplementedDispositionServiceServer
// for forward compatibility
type DispositionServiceServer interface {
	CreateDisposition(context.Context, *CreateDispositionRequest) (*CreateDispositionResponse, error)
	GetDisposition(context.Context, *GetDispositionRequest) (*GetDispositionResponse, error)
	GetDispositions(context.Context, *GetDispositionsRequest) (*GetDispositionsResponse, error)
	mustEmbedUnimplementedDispositionServiceServer()
}

// UnimplementedDispositionServiceServer must be embedded to have forward compatible implementations.
type UnimplementedDispositionServiceServer struct {
}

func (UnimplementedDispositionServiceServer) CreateDisposition(context.Context, *CreateDispositionRequest) (*CreateDispositionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDisposition not implemented")
}
func (UnimplementedDispositionServiceServer) GetDisposition(context.Context, *GetDispositionRequest) (*GetDispositionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDisposition not implemented")
}
func (UnimplementedDispositionServiceServer) GetDispositions(context.Context, *GetDispositionsRequest) (*GetDispositionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDispositions not implemented")
}
func (UnimplementedDispositionServiceServer) mustEmbedUnimplementedDispositionServiceServer() {}

// UnsafeDispositionServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DispositionServiceServer will
// result in compilation errors.
type UnsafeDispositionServiceServer interface {
	mustEmbedUnimplementedDispositionServiceServer()
}

func RegisterDispositionServiceServer(s grpc.ServiceRegistrar, srv DispositionServiceServer) {
	s.RegisterService(&DispositionService_ServiceDesc, srv)
}

func _DispositionService_CreateDisposition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDispositionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DispositionServiceServer).CreateDisposition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/disposition.DispositionService/CreateDisposition",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DispositionServiceServer).CreateDisposition(ctx, req.(*CreateDispositionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DispositionService_GetDisposition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDispositionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DispositionServiceServer).GetDisposition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/disposition.DispositionService/GetDisposition",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DispositionServiceServer).GetDisposition(ctx, req.(*GetDispositionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DispositionService_GetDispositions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDispositionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DispositionServiceServer).GetDispositions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/disposition.DispositionService/GetDispositions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DispositionServiceServer).GetDispositions(ctx, req.(*GetDispositionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DispositionService_ServiceDesc is the grpc.ServiceDesc for DispositionService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DispositionService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "disposition.DispositionService",
	HandlerType: (*DispositionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateDisposition",
			Handler:    _DispositionService_CreateDisposition_Handler,
		},
		{
			MethodName: "GetDisposition",
			Handler:    _DispositionService_GetDisposition_Handler,
		},
		{
			MethodName: "GetDispositions",
			Handler:    _DispositionService_GetDispositions_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/pb/disposition.proto",
}
